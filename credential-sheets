#!/usr/bin/perl -T

# Copyright (C) 2012-2016 by Debian Edu project, http://wiki.debian.org/DebianEdu
#       Mike Gabriel <mike.gabriel@das-netzwerkteam.de>

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.

use strict;
use warnings;
use Cwd;
use File::Basename;
use Archive::Zip qw(:ERROR_CODES :CONSTANTS);
use AnyData;
use Getopt::Long;
use Data::Dumper;

sub usage {
	print "usage: ".basename($0)." [options] <CSV-file-1> [<CSV-file-2> [...]]\n";
	print "\n";
	print "Options:\n";
	print "    --help                        -- show this help output.\n";
	print "    --template=<tpl-name>         -- name of the template to use.\n";
	print "    --cols=<x>                    -- render <x> columns per sheet\n";
	print "    --rows=<y>                    -- render <y> rows per sheet\n";
	print "    --zip                         -- do create a ZIP file at the end\n";
	print "    --zipfilename=<zip-file-name> -- alternative ZIP file name (default: name of parent folder)\n";
	print "\n";
	print "CSV File Column Arrangement\n";
	print "---------------------------\n";
	print "\n";
	print "The ".basename($0)." script can handle any sort of column arrangement in given CSV file(s).\n";
	print "It expects the CSV file(s) to have column names in their first line.\n";
	print "\n";
	print "The given column names have to map to the \"VAR-<column-name>\" in ".basename($0)."'s\n";
	print "LaTeX templates.\n";
	print "\n";
	print "The shipped-with templates (\"stundents\", \"teachers\") can handle these column names:\n";
	print "\n";
	print "		login:		The user account's login id (uid)\n";
	print "		lastName:	The user's last name(s)\n";
	print "		firstName:	The user's first name(s)\n";
	print "		password:	The user's password\n";
	print "		form:		The form name/ID (student template only)\n";
	print "		subjects:	A list of subjects taught by a teacher (teacher template only)\n";
	print "\n";
	print "If you create your own templates, you are flexible to use arbitrary column names. Only make\n";
	print "make sure that the column names provided in the CSV file(s) match the variables used in the\n";
	print "customized LaTeX template.\n";
	print "\n";
	print "The shipped-with ".basename($0)." templates can be found in /usr/share/".basename($0)."/templates/.\n";
	print "When customizing templates, simply place them into ~/.".basename($0)."/templates/.\n";
	print "\n";

	exit 0;
}

my $usage = '';
my $do_zip = '';
my $template = 'students';
my $zipfile_name = basename(&Cwd::cwd())."-TEMPLATE.zip";
my $rows = '7';
my $cols = '3';
GetOptions ('help' => \$usage,
            'template=s' => \$template,
            'zip' => \$do_zip,
            'zipfilename=s' => \$zipfile_name,
            'rows=s' => \$rows,
            'cols=s' => \$cols, );

$zipfile_name =~ s/TEMPLATE/$template/;

if ( $usage ) { usage() };

if ( (scalar @ARGV) == 0 ) {

	print "ERROR: No CSV file(s) name given. Aborting...\n\n";
	usage();
};

my $zip;
if ( $do_zip ) {
	print "preparing ZIP archive file: $zipfile_name\n";
	$zip = Archive::Zip->new();
}

if ( -e '~/.'.basename($0).'/'.$template.'-template.tex' ) {
	open TEMPLATE, '~/.'.basename($0).'/'.$template.'-template.tex' or dir $!;
}
elsif ( -e '/etc/'.basename($0).'/'.$template.'-template.tex' ) {
	open TEMPLATE, '~/.'.basename($0).'/'.$template.'-template.tex' or dir $!;
}
else {
	open TEMPLATE, '/usr/share/'.basename($0).'/'.$template.'-template.tex' or dir $!;
}

my @template = <TEMPLATE>;
close TEMPLATE;

my $tex_header = <<"TEXHEADER";
\\documentclass[a4paper,12pt]{scrartcl}
\\usepackage{ngerman}
\\usepackage[utf8]{inputenc}
\\usepackage{cmbright}
\\usepackage[noheadfoot, left=1cm, right=1cm, top=4.93mm, bottom=4.93mm]{geometry}

\\usepackage[newdimens]{labels}

\\LabelInfotrue
\\LabelGridtrue % Kann fÃ¼r Testzwecke verwendet werden.
\\LabelRows=$rows
\\LabelCols=$cols
\\LeftPageMargin=10mm
\\RightPageMargin=10mm
\\TopPageMargin=4.93mm
\\BottomPageMargin=4.93mm
\\InterLabelRow=2mm
\\InterLabelColumn=2mm

\\begin{document}

\\begin{labels}
TEXHEADER

my $tex_footer = <<'TEXFOOTER';
\end{labels}
\end{document}
TEXFOOTER

while ( @ARGV )
{
	my $csv_sheet = shift;
	print "processing $csv_sheet\n";
	my $tex_sheet = $csv_sheet;
	$tex_sheet =~ s/.csv/.tex/;
	my $pdf_file = $csv_sheet;
	$pdf_file =~ s/.csv/.pdf/;

	open TEXFILE, ">$tex_sheet";
	print TEXFILE $tex_header;

	my $csv_table = adTie('CSV', $csv_sheet, 'r',  );
	while (my $row = each %$csv_table) {
		my $this_template = join("", @template);
		while (my ($key, $value) = each %$row) {
			if (!$key) {
				next;
			}
			$this_template =~ s/VAR-$key/$value/;
		}
		print TEXFILE "$this_template";
	}

	print TEXFILE $tex_footer;
	print "created $tex_sheet\n";
	system("pdflatex $tex_sheet >/dev/null");
	print "rendered $pdf_file\n";

	if ( $do_zip ) {
		print "writing CSV sheet to ZIP archive\n";
		$zip->addFile( $csv_sheet ) or warn "Can't add file $csv_sheet\n";
		print "writing PDF file to ZIP archive\n";
		$zip->addFile( $pdf_file ) or warn "Can't add file $pdf_file\n";
	}

}

if ( $do_zip ) {
	my $status = $zip->writeToFileNamed($zipfile_name);
	print "ZIP archive $zipfile_name closed\n";
	exit $status;
}
